a
a$z <- I(temp[1,])
a$z <- I(t(temp[1,]))
a
temp[1,]
class(temp)
class(temp) <- 'matrix'
temp
class(temp)
a$z <- I(t(temp[1,]))
a
a <- data.frame(x = 1, y = 'a', z = I(temp[1,]))
a
a <- data.frame(x = 1, y = 'a', z = I(temp[1,]))
temp[1,]
class(temp[1,])
a <- data.frame(x = 1, y = 'a', z = I(temp[1,,drop = F]))
a
help(I)
matrix <- c(1:6,nrow = 2, ncol = 3)
rm(matrix)
temp <- matrix(1:6,nrow = 2, ncol = 3)
temp
a <- data.frame(x = 1, y = 'a', z = I(temp)
a
a <- data.frame(x = 1, y = 'a', z = I(temp))
a
a <- data.frame(x = 1:2, y = rep('a',2), z = I(temp))
a
aa$z
a$z
str(a)
str$z
a$z
a <- data.frame(x = 1, y = 'a', z = I(temp))
a$z
a
a$x
a$y
LineList2Count <- function(d,...){
out <- data.frame(z = with(d, table(...)))
}
LineList2Count(Data, Result, PoolSize)
LineList2Count <- function(d,...){
out <- data.frame(z = d %>% with(table(...)))
}
LineList2Count(Data, Result, PoolSize)
LineList2Count <- function(d , ...){
a <- enquos(...)
out <- data.frame(z = d %>% with(table(!!! a)))
}
LineList2Count(Data, Result, PoolSize)
LineList2Count <- function(d , ...){
a <- enquos(...)
out <- data.frame(z = d %>% with(table(!! a)))
}
LineList2Count(Data, Result, PoolSize)
help(enquos)
help(enquos)
LineList2Count <- function(d , ...){
a <- quote(...)
out <- data.frame(z = d %>% with(table(substitute(a))))
}
LineList2Count(Data, Result, PoolSize)
LineList2Count <- function(d){
out <- with(d,table(Result,PoolSize))
}
LineList2Count(Data, Result, PoolSize)
LineList2Count(Data)
LineList2Count <- function(d){
out <- with(d,table(Result,PoolSize))
out
}
LineList2Count(Data)
LineList2Count <- function(d){
out <- data.frame(I(with(d,table(Result,PoolSize))))
out
}
LineList2Count(Data)
LineList2Count <- function(d){
out <- data.frame(PoolResluts = I(with(d,table(Result,PoolSize))))
out
}
LineList2Count(Data)
LineList2Count(Data)$PoolResults
LineList2Count(Data) %>% str
LineList2Count <- function(d){
out <- data.frame(PoolResults = I(with(d,table(Result,PoolSize))))
out
}
LineList2Count(Data)$PoolResults
Data %>% group_by(Region, Village, Site) %>% do(LineList2Count)
Data %>% group_by(Region, Village, Site) %>% do(LineList2Count(.))
Data %>% group_by(Region, Village, Site) %>% group_modify(LineList2Count())
help(group_modify)
Data %>% group_by(Region, Village, Site) %>% group_modify(LineList2Count
)
LineList2Count <- function(d,...){
out <- data.frame(PoolResults = I(with(d,table(Result,PoolSize))))
out
}
Data %>% group_by(Region, Village, Site) %>% group_modify(LineList2Count)
Data %>% subset(Village == "A-1")
Data %>% subset(Site == "A-1_1")
Data %>% subset(Site == "A-1-1")
Data %>% subset(Site == "A-1-1") %>% group_by(PoolSize, Result) %>% summarise(n = n())
Data <- data.frame()
TruePrev <- data.frame()
for(Sp in names(SpeciesCatchSizeExp)){
for(R in names(RegionPrevs)){
for(V in 1:NumVillages){
VillageTruePrev <- plogis(qlogis(RegionPrevs[[R]]) + rnorm(1,mean = 0, sd = 1))
for(S in 1:NumSites){
SiteTruePrev <- plogis(qlogis(VillageTruePrev) + rnorm(1,mean = 0, sd = 2))
TruePrev <- rbind(TruePrev,
data.frame(Species = Sp,
Region = R,
Village = paste(R,V,sep = "-"),
Site = paste(R,V,S,sep = "-"),
PrevalenceRegion = RegionPrevs[[R]],
PrevalenceVillage = VillageTruePrev,
PrevalenceSite = SiteTruePrev))
#Generate catch sizes from zero-truncated negative binomial distribution. 're-roll' sizes <= 0 to guarantee at least one mossie
CatchSizeMult <- SiteTruePrev/RegionPrevs[[R]]
Catch <- 0
while(Catch<=0){
Catch <- rnbinom(1,mu = MeanCatch * CatchSizeMult^SpeciesCatchSizeExp[Sp],DispersionCatch)
}
NumBigPools <- Catch %/% MaxPoolSize
if(NumBigPools){
Data <- rbind(Data,
data.frame(Species = Sp,
Region = R,
Village = paste(R,V,sep = "-"),
Site = paste(R,V,S,sep = "-"),
PoolSize = rep(MaxPoolSize,NumBigPools),
PrevalenceSite = SiteTruePrev,
PrevalenceVillage = VillageTruePrev,
PrevalenceRegion = RegionPrevs[[R]]))
}
SizeSmallPool <- Catch %% MaxPoolSize
if(SizeSmallPool){
Data <- rbind(Data,
data.frame(Species = Sp,
Region = R,
Village = paste(R,V,sep = "-"),
Site = paste(R,V,S,sep = "-"),
PoolSize = SizeSmallPool,
PrevalenceSite = SiteTruePrev,
PrevalenceVillage = VillageTruePrev,
PrevalenceRegion = RegionPrevs[[R]]))
}
}
}
}
}
Data$Result <- with(Data,as.numeric(runif(nrow(Data)) < 1-(1-PrevalenceSite)^PoolSize))
Data <- Data %>%
group_by(Species,Region,Village,Site) %>%
summarise(Abundance = sum(PoolSize)) %>%
merge(Data,.) %>%
mutate(LogAb = log(Abundance))
Data
library(tidyr)
library(ggplot2)
TruePrev %>%
separate(Site,c(NA,"VillageNum","SiteNum")) %>%
ggplot() +
geom_point(aes(x = SiteNum, y = PrevalenceSite, color = Region)) +
facet_grid( ~ VillageNum)
Data <- data.frame()
TruePrev <- data.frame()
for(Sp in names(SpeciesCatchSizeExp)){
for(R in names(RegionPrevs)){
for(V in 1:NumVillages){
VillageTruePrev <- plogis(qlogis(RegionPrevs[[R]]) + rnorm(1,mean = 0, sd = 0.5))
for(S in 1:NumSites){
SiteTruePrev <- plogis(qlogis(VillageTruePrev) + rnorm(1,mean = 0, sd = 1))
TruePrev <- rbind(TruePrev,
data.frame(Species = Sp,
Region = R,
Village = paste(R,V,sep = "-"),
Site = paste(R,V,S,sep = "-"),
PrevalenceRegion = RegionPrevs[[R]],
PrevalenceVillage = VillageTruePrev,
PrevalenceSite = SiteTruePrev))
#Generate catch sizes from zero-truncated negative binomial distribution. 're-roll' sizes <= 0 to guarantee at least one mossie
CatchSizeMult <- SiteTruePrev/RegionPrevs[[R]]
Catch <- 0
while(Catch<=0){
Catch <- rnbinom(1,mu = MeanCatch * CatchSizeMult^SpeciesCatchSizeExp[Sp],DispersionCatch)
}
NumBigPools <- Catch %/% MaxPoolSize
if(NumBigPools){
Data <- rbind(Data,
data.frame(Species = Sp,
Region = R,
Village = paste(R,V,sep = "-"),
Site = paste(R,V,S,sep = "-"),
PoolSize = rep(MaxPoolSize,NumBigPools),
PrevalenceSite = SiteTruePrev,
PrevalenceVillage = VillageTruePrev,
PrevalenceRegion = RegionPrevs[[R]]))
}
SizeSmallPool <- Catch %% MaxPoolSize
if(SizeSmallPool){
Data <- rbind(Data,
data.frame(Species = Sp,
Region = R,
Village = paste(R,V,sep = "-"),
Site = paste(R,V,S,sep = "-"),
PoolSize = SizeSmallPool,
PrevalenceSite = SiteTruePrev,
PrevalenceVillage = VillageTruePrev,
PrevalenceRegion = RegionPrevs[[R]]))
}
}
}
}
}
Data$Result <- with(Data,as.numeric(runif(nrow(Data)) < 1-(1-PrevalenceSite)^PoolSize))
TruePrev %>%
separate(Site,c(NA,"VillageNum","SiteNum")) %>%
ggplot() +
geom_point(aes(x = SiteNum, y = PrevalenceSite, color = Region)) +
facet_grid( ~ VillageNum)
TruePrev %>%
separate(Site,c(NA,"VillageNum","SiteNum")) %>%
ggplot() +
geom_point(aes(x = SiteNum, y = PrevalenceSite, color = Region)) +
facet_grid( ~ VillageNum) +
scale_y_log10()
TruePrev %>%
separate(Site,c(NA,"VillageNum","SiteNum")) %>%
ggplot() +
geom_point(aes(x = VillageNum, y = PrevalenceVillage, color = Region))
TruePrev %>%
separate(Site,c(NA,"VillageNum","SiteNum")) %>%
ggplot() +
geom_point(aes(x = VillageNum, y = PrevalenceSite, color = Region))
TruePrev %>%
separate(Site,c(NA,"VillageNum","SiteNum")) %>%
ggplot() +
geom_point(aes(x = VillageNum, y = PrevalenceSite, color = Region)) +
scale_y_log10()
a <- PoolRegBayes(Data, Result ~ Species + Region + (1|Village/Site), PoolSize)
c <- PoolRegBayes(Data, Result ~ Species + Village + (1|Site), PoolSize)
pa <- getPrevalence(a)
pc <- getPrevalence(c)
PrevRegion <- PoolPrev(Data,Result,PoolSize,Species,Region)
PrevVillage <- PoolPrev(Data,Result,PoolSize,Species,Region,Village)
a
c
PlotDataRegion <- PrevRegion %>%
unique %>%
select(Species, Region, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevRegion %>%
unique %>%
select(Species, Region, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(TruePrev %>%
select(Species, Region,PrevalenceRegion) %>%
unique %>%
mutate(Method = "True") %>%
rename(Prev = PrevalenceRegion)) %>%
bind_rows(pa$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes \n Region/Village/Site') %>%
rename(Prev = Estimate,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(pa$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes \n Region/Village') %>%
rename(Prev = Estimate,
CILow= CrILow,
CIHigh = CrIHigh))
PlotDataVillage <- PrevVillage %>%
unique %>%
select(Species, Region, Village, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevVillage %>%
unique %>%
select(Species, Region, Village, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(TruePrev %>%
select(Species, Region,Village,PrevalenceVillage) %>%
unique %>%
mutate(Method = "True") %>%
rename(Prev = PrevalenceVillage)) %>%
bind_rows(pa$Village %>%
mutate(Method = 'Heirarchical Bayes \n Region/Village/Site') %>%
rename(Prev = Estimate,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(pc$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes \n Village/Site') %>%
mutate(Region = substr(Village,1,1)) %>%
rename(Prev = Estimate,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
mutate(VillageNum = (strsplit(as.character(Village),"-") %>% as.data.frame() %>% t)[,2] %>% as.integer) %>%
subset(VillageNum %in% c(3,6,9))
#Plots by region
PlotsRegion <- PlotDataRegion %>%
ggplot() +
geom_pointrange(aes(x = Region,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method,
linetype = Species),
position = position_dodge(width = 0.8)) +
facet_grid(Species~Region,scales = "free_x") +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent, limits = 10^c(-3.5,-1.2)) +
scale_x_discrete(breaks = NULL)+
#scale_y_log10() +
ylab('Prevalence')
PlotsRegion
#Plots by region
PlotsRegion <- PlotDataRegion %>%
ggplot() +
geom_pointrange(aes(x = Region,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method,
linetype = Species),
position = position_dodge(width = 0.8)) +
facet_grid(Species~Region,scales = "free_x") +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent, limits = 10^c(-3.5,-1.0)) +
scale_x_discrete(breaks = NULL)+
#scale_y_log10() +
ylab('Prevalence')
PlotsRegion
#Plots by village
PlotsVillage <- PlotDataVillage  %>%
ggplot() +
geom_pointrange(aes(x = VillageNum,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method,
linetype = Species),
position = position_dodge(width = 0.8)) +
facet_grid(Species~Region) +
#scale_y_log10(labels=scales::percent) +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent, limits = 10^c(-3.3,-0.9)) +
#scale_x_discrete() +
ylab('Prevalence') +
xlab('Village')
PlotsVillage
#Plots by village
PlotsVillage <- PlotDataVillage  %>%
ggplot() +
geom_pointrange(aes(x = VillageNum,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method,
linetype = Species),
position = position_dodge(width = 0.8)) +
facet_grid(Species~Region) +
#scale_y_log10(labels=scales::percent) +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent, limits = 10^c(-3.3,-0.7)) +
#scale_x_discrete() +
ylab('Prevalence') +
xlab('Village')
PlotsVillage
brms::update_brms
brms::update_brm
class(a)
update.brmsfit
??cores
parallel::detectCores()
parallel::detectCores
help(brm)
c <- PoolRegBayes(Data, Result ~ Species + Village + (1|Site), PoolSize,iter = 5000,warmup = 1000)
PlotDataRegion <- PrevRegion %>%
unique %>%
select(Species, Region, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevRegion %>%
unique %>%
select(Species, Region, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(TruePrev %>%
select(Species, Region,PrevalenceRegion) %>%
unique %>%
mutate(Method = "True") %>%
rename(Prev = PrevalenceRegion)) %>%
bind_rows(pa$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes \n Region/Village/Site') %>%
rename(Prev = Estimate,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(pa$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes \n Region/Village') %>%
rename(Prev = Estimate,
CILow= CrILow,
CIHigh = CrIHigh))
PlotDataVillage <- PrevVillage %>%
unique %>%
select(Species, Region, Village, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevVillage %>%
unique %>%
select(Species, Region, Village, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(TruePrev %>%
select(Species, Region,Village,PrevalenceVillage) %>%
unique %>%
mutate(Method = "True") %>%
rename(Prev = PrevalenceVillage)) %>%
bind_rows(pa$Village %>%
mutate(Method = 'Heirarchical Bayes \n Region/Village/Site') %>%
rename(Prev = Estimate,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(pc$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes \n Village/Site') %>%
mutate(Region = substr(Village,1,1)) %>%
rename(Prev = Estimate,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
mutate(VillageNum = (strsplit(as.character(Village),"-") %>% as.data.frame() %>% t)[,2] %>% as.integer) %>%
subset(VillageNum %in% c(3,6,9))
#Plots by village
PlotsVillage <- PlotDataVillage  %>%
ggplot() +
geom_pointrange(aes(x = VillageNum,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method,
linetype = Species),
position = position_dodge(width = 0.8)) +
facet_grid(Species~Region) +
#scale_y_log10(labels=scales::percent) +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent, limits = 10^c(-3.3,-0.7)) +
#scale_x_discrete() +
ylab('Prevalence') +
xlab('Village')
PlotsVillage
c
pkgbuild::compile_dll()
roxygen2::roxygenize()
Moda <- PoolRegBayes(Data, Result ~ Species + Region + (1|Village/Site), PoolSize)
a
p~inv_logit(eta)
##Bayesian version with brms
pkgbuild::compile_dll()
roxygen2::roxygenize()
Moda <- PoolRegBayes(Data, Result ~ Species + Region + (1|Village/Site), PoolSize)
lookup('bernoulli_logit_lpmf')
##Bayesian version with brms
pkgbuild::compile_dll()
roxygen2::roxygenize()
Moda <- PoolRegBayes(Data, Result ~ Species + Region + (1|Village/Site), PoolSize)
##Bayesian version with brms
pkgbuild::compile_dll()
Moda <- PoolRegBayes(Data, Result ~ Species + Region + (1|Village/Site), PoolSize)
##Bayesian version with brms
pkgbuild::compile_dll()
roxygen2::roxygenize()
Moda <- PoolRegBayes(Data, Result ~ Species + Region + (1|Village/Site), PoolSize)
help(brm)
##Bayesian version with brms
pkgbuild::compile_dll()
roxygen2::roxygenize()
Moda <- PoolRegBayes(Data, Result ~ Species + Region + (1|Village/Site), PoolSize)
##Bayesian version with brms
pkgbuild::compile_dll()
roxygen2::roxygenize()
Moda <- PoolRegBayes(Data, Result ~ Species + Region + (1|Village/Site), PoolSize)
##Bayesian version with brms
pkgbuild::compile_dll()
roxygen2::roxygenize()
Moda <- PoolRegBayes(Data, Result ~ Species + Region + (1|Village/Site), PoolSize)
##Bayesian version with brms
pkgbuild::compile_dll()
roxygen2::roxygenize()
Moda <- PoolRegBayes(Data, Result ~ Species + Region + (1|Village/Site), PoolSize)
bform
bform(a)
help(bf)
vignette("brms_overview")
