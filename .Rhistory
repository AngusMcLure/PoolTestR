Site = paste(R,V,S,sep = "-"),
PoolSize = rep(MaxPoolSize,NumBigPools),
PrevalenceSite = SiteTruePrev,
PrevalenceVillage = VillageTruePrev,
PrevalenceRegion = RegionPrevs[[R]]))
}
SizeSmallPool <- Catch %% MaxPoolSize
if(SizeSmallPool){
Data <- rbind(Data,
data.frame(Species = Sp,
Region = R,
Village = paste(R,V,sep = "-"),
Site = paste(R,V,S,sep = "-"),
PoolSize = SizeSmallPool,
PrevalenceSite = SiteTruePrev,
PrevalenceVillage = VillageTruePrev,
PrevalenceRegion = RegionPrevs[[R]]))
}
}
}
}
Data <- data.frame()
Data <- data.frame()
for(R in names(RegionPrevs)){
for(V in 1:NumVillages){
#Difference of village prevalence from the region prevalence on log-odds scale
VillageDeviate <- rnorm(1,mean = 0, sd = VillageSD)
VillageTruePrev <- plogis(qlogis(RegionPrevs[[R]]) + VillageDeviate)
for(S in 1:NumSites){
#Difference of site prevalence from the village prevalence on log-odds scale
SiteDeviate <- rnorm(1,mean = 0, sd = SiteSD)
SiteTruePrev <- plogis(qlogis(RegionPrevs[[R]]) + VillageDeviate + SiteDeviate)
#Generate catch sizes from zero-truncated negative binomial distribution. 're-roll' sizes == 0 to guarantee at least one mossie
Catch <- 0
while(Catch<=0){
Catch <- rnbinom(1,mu = MeanCatch ,DispersionCatch)
}
#Split pools into as many of size MaxPoolSize as possible and the remainder in another small pool
NumBigPools <- Catch %/% MaxPoolSize
if(NumBigPools){
Data <- rbind(Data,
data.frame(Region = R,
Village = paste(R,V,sep = "-"),
Site = paste(R,V,S,sep = "-"),
PoolSize = rep(MaxPoolSize,NumBigPools),
PrevalenceSite = SiteTruePrev,
PrevalenceVillage = VillageTruePrev,
PrevalenceRegion = RegionPrevs[[R]]))
}
SizeSmallPool <- Catch %% MaxPoolSize
if(SizeSmallPool){
Data <- rbind(Data,
data.frame(Region = R,
Village = paste(R,V,sep = "-"),
Site = paste(R,V,S,sep = "-"),
PoolSize = SizeSmallPool,
PrevalenceSite = SiteTruePrev,
PrevalenceVillage = VillageTruePrev,
PrevalenceRegion = RegionPrevs[[R]]))
}
}
}
}
Data$Result <- with(Data,as.numeric(runif(nrow(Data)) < (1-(1-PrevalenceSite)^PoolSize)))
Data
HierPrevModel <- PoolRegBayes(Data, Result ~ Region + (1|Village/Site), PoolSize)
HierPrevs
HierPrevModel
HierPrevs <- getPrevalence(HierPrevModel) # Gett fitted prevalence at each level: Population Effects only (in this case this is region), Population Effects and Village, and population effects, village and site.
HierPrevs
HierPrevs$PopulationEffects
HierPrevs$Village
HierPrevs$Site
roxygen2::roxygenize()
setwd("~/Documents/PoolTestR")
roxygen2::roxygenize()
roxygen2::roxygenize()
Data
Data %>% select_at(c("Region", "Site"), "Village")
Data %>% select_at(c("Region", "Site","Village"), )
Data %>% select_at(c("Region", "Site","Village"))
Data %>% select_at(-c("Region", "Site","Village"))
Data[-Site)
Data[-Site]
Data[-"Site"]
Data[-"Site",]
HierPrevs
# Calculating prevalences at different levels ignoring hierarchical sampling structure
PrevRegion <- PoolPrev(Data,Result,PoolSize,Region)
Data$PrevalenceRegion
PlotDataRegion <- PrevRegion %>%
unique %>%
select(Region, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevRegion %>%
unique %>%
select(Species, Region, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(Data %>%
select(Region,PrevalenceRegion) %>%
unique %>%
pivot_longer(cols = -c(Region),
names_prefix = "PrevalenceRegion",
names_to = "Method",
values_to = "Prev")) %>%
bind_rows(HierPrevs$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes') %>%
rename(Prev = Estimate,
CILow = CrILow,
CIHigh = CrIHigh) %>%
select(Species, Region, Prev, CILow, CIHigh, Method))
PlotDataRegion <- PrevRegion %>%
unique %>%
select(Region, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevRegion %>%
unique %>%
select(Region, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(Data %>%
select(Region,PrevalenceRegion) %>%
unique %>%
pivot_longer(cols = -c(Region),
names_prefix = "PrevalenceRegion",
names_to = "Method",
values_to = "Prev")) %>%
bind_rows(HierPrevs$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes') %>%
rename(Prev = Estimate,
CILow = CrILow,
CIHigh = CrIHigh) %>%
select(Species, Region, Prev, CILow, CIHigh, Method))
PlotDataRegion <- PrevRegion %>%
unique %>%
select(Region, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevRegion %>%
unique %>%
select(Region, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(Data %>%
select(Region,PrevalenceRegion) %>%
unique %>%
pivot_longer(cols = -c(Region),
names_prefix = "PrevalenceRegion",
names_to = "Method",
values_to = "Prev")) %>%
bind_rows(HierPrevs$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes') %>%
rename(Prev = Estimate,
CILow = CrILow,
CIHigh = CrIHigh) %>%
select(Region, Prev, CILow, CIHigh, Method))
PlotsRegion <- PlotDataRegion %>%
ggplot() +
geom_pointrange(aes(x = Method,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method),
position = position_dodge(width = 0.8)) +
facet_grid(~Region,scales = "free_x") +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent) +
scale_x_discrete()+
theme(axis.text.x = element_text(angle = 90)) +
ylab('Prevalence')
PlotsRegion
Data %>%
select(Region,PrevalenceRegion) %>%
unique
Data %>%
select(Region,PrevalenceRegion) %>%
unique %>% mutate(Method  = "True")
PlotDataRegion <- PrevRegion %>%
unique %>%
select(Region, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevRegion %>%
unique %>%
select(Region, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(Data %>%
select(Region,PrevalenceRegion) %>%
unique %>%
mutate(Method = "True")) %>%
bind_rows(HierPrevs$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes') %>%
rename(Prev = Estimate,
CILow = CrILow,
CIHigh = CrIHigh) %>%
select(Region, Prev, CILow, CIHigh, Method))
PlotsRegion <- PlotDataRegion %>%
ggplot() +
geom_pointrange(aes(x = Method,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method),
position = position_dodge(width = 0.8)) +
facet_grid(~Region,scales = "free_x") +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent) +
scale_x_discrete()+
theme(axis.text.x = element_text(angle = 90)) +
ylab('Prevalence')
PlotsRegion
PlotDataRegion
PlotDataRegion <- PrevRegion %>%
unique %>%
select(Region, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevRegion %>%
unique %>%
select(Region, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(Data %>%
select(Region,PrevalenceRegion) %>%
unique %>%
mutate(Method = "True") %>%
rename(Prev = PrevalenceRegion)) %>%
bind_rows(HierPrevs$PopulationEffects %>%
mutate(Method = 'Heirarchical Bayes') %>%
rename(Prev = Estimate,
CILow = CrILow,
CIHigh = CrIHigh) %>%
select(Region, Prev, CILow, CIHigh, Method))
PlotsRegion <- PlotDataRegion %>%
ggplot() +
geom_pointrange(aes(x = Method,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method),
position = position_dodge(width = 0.8)) +
facet_grid(~Region,scales = "free_x") +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent) +
scale_x_discrete()+
theme(axis.text.x = element_text(angle = 90)) +
ylab('Prevalence')
PlotsRegion
HierPrevs$PopulationEffects
PlotsRegion <- PlotDataRegion %>%
ggplot() +
geom_pointrange(aes(x = Method,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method)) +
facet_grid(~Region,scales = "free_x") +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent) +
scale_x_discrete(breaks = NULL)+
theme(axis.text.x = element_text(angle = 90)) +
ylab('Prevalence')
PlotsRegion
PrevVillage <- PoolPrev(Data,Result,PoolSize,Region,Village)
PlotDataVillage <- PrevVillage %>%
unique %>%
select(Region, Village, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevRegion %>%
unique %>%
select(Region, Village, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(Data %>%
select(Region, Village,PrevalenceVillage) %>%
unique %>%
mutate(Method = "True") %>%
rename(Prev = PrevalenceVillage)) %>%
bind_rows(HierPrevs$Village %>%
mutate(Method = 'Heirarchical Bayes') %>%
rename(Prev = Estimate,
CILow = CrILow,
CIHigh = CrIHigh) %>%
select(Region, Village, Prev, CILow, CIHigh, Method))
PlotDataVillage <- PrevVillage %>%
unique %>%
select(Region, Village, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevVillage %>%
unique %>%
select(Region, Village, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(Data %>%
select(Region, Village,PrevalenceVillage) %>%
unique %>%
mutate(Method = "True") %>%
rename(Prev = PrevalenceVillage)) %>%
bind_rows(HierPrevs$Village %>%
mutate(Method = 'Heirarchical Bayes') %>%
rename(Prev = Estimate,
CILow = CrILow,
CIHigh = CrIHigh) %>%
select(Region, Village, Prev, CILow, CIHigh, Method))
PlotsVillage <- PlotDataVillage%>%
ggplot() +
geom_pointrange(aes(x = Village,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method),
position = position_dodge(width = 0.8)) +
facet_grid(~Region,scales = "free_x") +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent) +
scale_x_discrete(breaks = NULL)+
theme(axis.text.x = element_text(angle = 90)) +
ylab('Prevalence')
PlotsVillage
PlotDataVillage <- PrevVillage %>%
unique %>%
select(Region, Village, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevVillage %>%
unique %>%
select(Region, Village, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(Data %>%
select(Region, Village,PrevalenceVillage) %>%
unique %>%
mutate(Method = "True") %>%
rename(Prev = PrevalenceVillage)) %>%
bind_rows(HierPrevs$Village %>%
mutate(Method = 'Heirarchical Bayes') %>%
rename(Prev = Estimate,
CILow = CrILow,
CIHigh = CrIHigh) %>%
select(Region, Village, Prev, CILow, CIHigh, Method)) %>%
mutate(VillageNum = (strsplit(as.character(Village),"-") %>% as.data.frame() %>% t)[,2] %>% as.integer) %>%
subset(VillageNum %in% 1:5)
PlotsVillage
PlotDataVillage <- PrevVillage %>%
unique %>%
select(Region, Village, PrevMLE, CILow, CIHigh) %>%
mutate(Method = 'BasicMLE') %>%
rename(Prev = PrevMLE) %>%
bind_rows(PrevVillage %>%
unique %>%
select(Region, Village, PrevBayes, CrILow, CrIHigh) %>%
mutate(Method = 'BasicBayes') %>%
rename(Prev = PrevBayes,
CILow= CrILow,
CIHigh = CrIHigh)) %>%
bind_rows(Data %>%
select(Region, Village,PrevalenceVillage) %>%
unique %>%
mutate(Method = "True") %>%
rename(Prev = PrevalenceVillage)) %>%
bind_rows(HierPrevs$Village %>%
mutate(Method = 'Heirarchical Bayes') %>%
rename(Prev = Estimate,
CILow = CrILow,
CIHigh = CrIHigh) %>%
select(Region, Village, Prev, CILow, CIHigh, Method)) %>%
mutate(VillageNum = (strsplit(as.character(Village),"-") %>% as.data.frame() %>% t)[,2] %>% as.integer) %>%
subset(VillageNum %in% 1:5)
PlotsVillage <- PlotDataVillage%>%
ggplot() +
geom_pointrange(aes(x = Village,
color = Region,
y = Prev,
ymin = CILow,
ymax = CIHigh,
shape = Method),
position = position_dodge(width = 0.8)) +
facet_grid(~Region,scales = "free_x") +
#scale_y_continuous(labels=scales::percent) +
scale_y_log10(labels=scales::percent) +
scale_x_discrete(breaks = NULL)+
theme(axis.text.x = element_text(angle = 90)) +
ylab('Prevalence')
PlotsVillage
roxygen2::roxygenize()
### Create a synthetic dataset with 4 locations across 5 years,
### where prevalence is declining
NumPools <- 1000
#Odds that a individual sample is positive in each location in the first year
BaseOdds <- c(A = 0.16, B = 0.04, C = 0.01, D = 0.16)
OddsRatioYear <- 0.8
#Randomly distribute pools between the 4 locations and 5 years,
#and chose random pool sizes between 10 and 25
Data <- data.frame(Place = sample(c("A","B","C","D"),NumPools, replace = T),
Year = sample(c(0:4), NumPools, replace = T),
NumInPool = sample(10:25, NumPools, replace = T))
### Create a synthetic dataset with 4 locations across 5 years,
### where prevalence is declining
NumPools <- 1000
#Odds that a individual sample is positive in each location in the first year
BaseOdds <- c(A = 0.16, B = 0.04, C = 0.01, D = 0.16)
OddsRatioYear <- 0.8
#Randomly distribute pools between the 4 locations and 5 years,
#and chose random pool sizes between 10 and 25
Data <- data.frame(Place = sample(c("A","B","C","D"),NumPools, replace = T),
Year = sample(c(0:4), NumPools, replace = T),
NumInPool = sample(10:25, NumPools, replace = T))
#'True' odds/prevalence in each location
Data$TrueOdds <- with(Data,BaseOdds[Place] * OddsRatioYear^(Year-min(Year)))
Data$TruePrev <- with(Data, TrueOdds/(1+TrueOdds))
#Simulate test results on pools
Data$Result <- with(Data,as.numeric(runif(NumPools) < 1-(1-TruePrev)^NumInPool))
library(dplyr)
Data <- Data %>% select(-TrueOdds,-TruePrev)
library(tidyr)
# Fit modified logistic regression model
#The below two lines produce identical results and support all the same methods
Reg <- PoolReg(Data,Result ~ Place + Year,
NumInPool)
Reg.glm <- glm(Result ~ Place + Year,
data = Data,
family = binomial(PoolLink(Data$NumInPool)))
#View summary of model
summary(Reg)
#Estimate and confidence intervals for the base odds and odds ratios
#These should be approx 0.16 for the intercept (i.e. Place A, Year 0),
#0.25, 0.0625, and 1.0 for places B-D and 0.8 for Year
exp(cbind(Estimate = coefficients(Reg), confint(Reg)))
#You can use the fitted model to predict the prevalence at other times
#The times and places at which to predict the prevalence
DataPredict <- expand.grid(Place = c("A","B","C","D"),Year = seq(2.2,2.8,by = 0.2))
#Predicted prevalence
DataPredict$PredictPrev <- plogis(predict(Reg, newdata = DataPredict))
head(DataPredict)
#Generate new random pool sizes for new data
DataPredict$NumInPool <- sample(5:10,nrow(DataPredict),replace = T)
DataPredict$PredictTestProb <- with(DataPredict, 1 - (1-PredictPrev)^NumInPool)
head(DataPredict)
PlotsRegion
clear
remove.packages("PoolTestR")
devtools::install_github("AngusMcLure/PoolTestR")
library(PoolTestR)
### Create a simulated dataset with 4 locations across 5 years, where prevalence is declining
NumPools <- 1000
#Odds that individual sample is positive in each location in the first year
BaseOdds <- c(A = 0.16, B = 0.04, C = 0.01, D = 0.16)
OddsRatioYear <- 0.8
#Randomly distribute pools between the 4 locations and 5 years,
#and chose random pool sizes between 10 and 25
Data <- data.frame(Place = sample(c("A","B","C","D"),NumPools, replace = T),
Year = sample(c(0:4), NumPools, replace = T),
NumInPool = sample(10:25, NumPools, replace = T))
#'True' odds/prevalence in each location
Data$TrueOdds <- with(Data,BaseOdds[Place] * OddsRatioYear^(Year-min(Year)))
Data$TruePrev <- with(Data, TrueOdds/(1+TrueOdds))
#Simulate test results on pools
Data$Result <- with(Data,as.numeric(runif(NumPools) < 1-(1-TruePrev)^NumInPool))
Data
install.packages("binGroup2")
DataCount <- with(Data,table(Result, NumInPool))
DataCount
DataCount[1,]
DataCount %>% as.matrix()
library(dplyr)
DataCount %>% as.matrix()
DataCount <- with(Data,table(Result, NumInPool)) %>% as.matrix
DataCount[1,]
DataCount[2,]
colnames(DataCount)
as.integer(colnames(DataCount))
colSums(DataCount)
binGroup2::propCI(DataCount[1,], as.integer(colnames(DataCount)),colSums(DataCount))
binGroup2::propCI(DataCount[1,], as.integer(colnames(DataCount)),colSums(DataCount), ci.method = "exact")
DataCount[1,]
DataCount[1,] %>% class
as.integer(colnames(DataCount))
colSums(DataCount) %>% class()
binGroup2::propCI(DataCount[1,], as.integer(colnames(DataCount)),colSums(DataCount), ci.method = "lrt")
binGroup2::propCI(DataCount[1,], as.integer(colnames(DataCount)),colSums(DataCount), ci.method = "exact")
binGroup2::propCI(DataCount[1,], as.integer(colnames(DataCount)),colSums(DataCount), ci.method = "score")
binGroup2::propCI(DataCount[1,], as.integer(colnames(DataCount)),colSums(DataCount), ci.method = "skew-score")
binGroup2::propCI(DataCount[1,], as.integer(colnames(DataCount)),colSums(DataCount), pt.method = 'bc-mle',ci.method = "skew-score")
binGroup2::propCI(DataCount[1,], as.integer(colnames(DataCount)),colSums(DataCount), pt.method = 'bc-mle',ci.method = "exact")
binGroup2::propCI(DataCount[1,], as.integer(colnames(DataCount)),colSums(DataCount),ci.method = "exact")
