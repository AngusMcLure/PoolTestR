// Generated by rstantools.  Do not edit by hand.

/*
    PoolTestR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    PoolTestR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with PoolTestR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_HierPoolPrevIndividualSD_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 34, column 2 to column 17)",
                                                      " (in 'string', line 35, column 2 to column 24)",
                                                      " (in 'string', line 36, column 2 to column 30)",
                                                      " (in 'string', line 60, column 2 to column 22)",
                                                      " (in 'string', line 61, column 2 to column 44)",
                                                      " (in 'string', line 39, column 2 to column 8)",
                                                      " (in 'string', line 40, column 9 to column 10)",
                                                      " (in 'string', line 40, column 2 to column 15)",
                                                      " (in 'string', line 41, column 9 to column 20)",
                                                      " (in 'string', line 41, column 2 to column 25)",
                                                      " (in 'string', line 42, column 2 to column 8)",
                                                      " (in 'string', line 44, column 4 to column 69)",
                                                      " (in 'string', line 45, column 4 to column 25)",
                                                      " (in 'string', line 43, column 15 to line 46, column 3)",
                                                      " (in 'string', line 43, column 2 to line 46, column 3)",
                                                      " (in 'string', line 53, column 2 to column 104)",
                                                      " (in 'string', line 54, column 2 to column 73)",
                                                      " (in 'string', line 55, column 2 to column 67)",
                                                      " (in 'string', line 56, column 2 to column 34)",
                                                      " (in 'string', line 57, column 2 to column 35)",
                                                      " (in 'string', line 2, column 2 to column 17)",
                                                      " (in 'string', line 3, column 2 to column 17)",
                                                      " (in 'string', line 4, column 25 to column 26)",
                                                      " (in 'string', line 4, column 2 to column 28)",
                                                      " (in 'string', line 5, column 2 to column 27)",
                                                      " (in 'string', line 6, column 31 to column 32)",
                                                      " (in 'string', line 6, column 2 to column 34)",
                                                      " (in 'string', line 7, column 18 to column 19)",
                                                      " (in 'string', line 7, column 2 to column 30)",
                                                      " (in 'string', line 8, column 31 to column 32)",
                                                      " (in 'string', line 8, column 33 to column 44)",
                                                      " (in 'string', line 8, column 2 to column 48)",
                                                      " (in 'string', line 11, column 2 to column 28)",
                                                      " (in 'string', line 12, column 2 to column 28)",
                                                      " (in 'string', line 13, column 2 to column 31)",
                                                      " (in 'string', line 15, column 2 to column 26)",
                                                      " (in 'string', line 16, column 2 to column 26)",
                                                      " (in 'string', line 17, column 2 to column 29)",
                                                      " (in 'string', line 20, column 38 to column 39)",
                                                      " (in 'string', line 20, column 2 to column 41)",
                                                      " (in 'string', line 22, column 9 to column 12)",
                                                      " (in 'string', line 22, column 2 to column 17)",
                                                      " (in 'string', line 23, column 9 to column 12)",
                                                      " (in 'string', line 23, column 2 to column 14)",
                                                      " (in 'string', line 24, column 9 to column 12)",
                                                      " (in 'string', line 24, column 2 to column 14)",
                                                      " (in 'string', line 25, column 2 to column 24)",
                                                      " (in 'string', line 26, column 2 to column 24)",
                                                      " (in 'string', line 27, column 2 to column 24)",
                                                      " (in 'string', line 30, column 4 to column 37)",
                                                      " (in 'string', line 29, column 15 to line 31, column 3)",
                                                      " (in 'string', line 29, column 2 to line 31, column 3)",
                                                      " (in 'string', line 35, column 9 to column 20)",
                                                      " (in 'string', line 36, column 18 to column 19)"};
#include <stan_meta_header.hpp>
class model_HierPoolPrevIndividualSD final : public model_base_crtp<model_HierPoolPrevIndividualSD> {
private:
  int N;
  int L;
  std::vector<int> NumGroups;
  int TotalGroups;
  std::vector<int> Result;
  Eigen::Matrix<double, -1, 1> PoolSize;
  Eigen::Matrix<double, -1, -1> Z;
  double InterceptNu;
  double InterceptMu;
  double InterceptSigma;
  double GroupSDNu;
  double GroupSDMu;
  double GroupSDSigma;
  std::vector<int> FlippedResult;
  Eigen::Matrix<double, -1, 1> Zw;
  std::vector<int> Zv;
  std::vector<int> Zu;
 
public:
  ~model_HierPoolPrevIndividualSD() { }
  
  inline std::string model_name() const final { return "model_HierPoolPrevIndividualSD"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_HierPoolPrevIndividualSD(stan::io::var_context& context__,
                                 unsigned int random_seed__ = 0,
                                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_HierPoolPrevIndividualSD_namespace::model_HierPoolPrevIndividualSD";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 21;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 21;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 21;
      current_statement__ = 21;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 22;
      context__.validate_dims("data initialization","L","int",
          context__.to_vec());
      L = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 22;
      current_statement__ = 22;
      check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 23;
      validate_non_negative_index("NumGroups", "L", L);
      current_statement__ = 24;
      context__.validate_dims("data initialization","NumGroups","int",
          context__.to_vec(L));
      NumGroups = std::vector<int>(L, std::numeric_limits<int>::min());
      
      current_statement__ = 24;
      assign(NumGroups, nil_index_list(), context__.vals_i("NumGroups"),
        "assigning variable NumGroups");
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "NumGroups[sym1__]",
                               NumGroups[(sym1__ - 1)], 1);}
      current_statement__ = 25;
      context__.validate_dims("data initialization","TotalGroups","int",
          context__.to_vec());
      TotalGroups = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      TotalGroups = context__.vals_i("TotalGroups")[(1 - 1)];
      current_statement__ = 25;
      current_statement__ = 25;
      check_greater_or_equal(function__, "TotalGroups", TotalGroups, L);
      current_statement__ = 26;
      validate_non_negative_index("Result", "N", N);
      current_statement__ = 27;
      context__.validate_dims("data initialization","Result","int",
          context__.to_vec(N));
      Result = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 27;
      assign(Result, nil_index_list(), context__.vals_i("Result"),
        "assigning variable Result");
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_greater_or_equal(function__, "Result[sym1__]",
                               Result[(sym1__ - 1)], 0);}
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_less_or_equal(function__, "Result[sym1__]",
                            Result[(sym1__ - 1)], 1);}
      current_statement__ = 28;
      validate_non_negative_index("PoolSize", "N", N);
      current_statement__ = 29;
      context__.validate_dims("data initialization","PoolSize","double",
          context__.to_vec(N));
      PoolSize = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(PoolSize, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> PoolSize_flat__;
        current_statement__ = 29;
        assign(PoolSize_flat__, nil_index_list(),
          context__.vals_r("PoolSize"), "assigning variable PoolSize_flat__");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 29;
          assign(PoolSize, cons_list(index_uni(sym1__), nil_index_list()),
            PoolSize_flat__[(pos__ - 1)], "assigning variable PoolSize");
          current_statement__ = 29;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_greater_or_equal(function__, "PoolSize[sym1__]",
                               PoolSize[(sym1__ - 1)], 0);}
      current_statement__ = 30;
      validate_non_negative_index("Z", "N", N);
      current_statement__ = 31;
      validate_non_negative_index("Z", "TotalGroups", TotalGroups);
      current_statement__ = 32;
      context__.validate_dims("data initialization","Z","double",
          context__.to_vec(N, TotalGroups));
      Z = Eigen::Matrix<double, -1, -1>(N, TotalGroups);
      stan::math::fill(Z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Z_flat__;
        current_statement__ = 32;
        assign(Z_flat__, nil_index_list(), context__.vals_r("Z"),
          "assigning variable Z_flat__");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= TotalGroups; ++sym1__) {
          current_statement__ = 32;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 32;
            assign(Z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Z_flat__[(pos__ - 1)], "assigning variable Z");
            current_statement__ = 32;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 32;
        for (int sym2__ = 1; sym2__ <= TotalGroups; ++sym2__) {
          current_statement__ = 32;
          current_statement__ = 32;
          check_greater_or_equal(function__, "Z[sym1__, sym2__]",
                                 rvalue(Z,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "Z"), 0);}}
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 32;
        for (int sym2__ = 1; sym2__ <= TotalGroups; ++sym2__) {
          current_statement__ = 32;
          current_statement__ = 32;
          check_less_or_equal(function__, "Z[sym1__, sym2__]",
                              rvalue(Z,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())), "Z"), 1);}}
      current_statement__ = 33;
      context__.validate_dims("data initialization","InterceptNu","double",
          context__.to_vec());
      InterceptNu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 33;
      InterceptNu = context__.vals_r("InterceptNu")[(1 - 1)];
      current_statement__ = 33;
      current_statement__ = 33;
      check_greater_or_equal(function__, "InterceptNu", InterceptNu, 0);
      current_statement__ = 34;
      context__.validate_dims("data initialization","InterceptMu","double",
          context__.to_vec());
      InterceptMu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 34;
      InterceptMu = context__.vals_r("InterceptMu")[(1 - 1)];
      current_statement__ = 34;
      current_statement__ = 34;
      check_greater_or_equal(function__, "InterceptMu", InterceptMu, 0);
      current_statement__ = 35;
      context__.validate_dims("data initialization","InterceptSigma",
          "double",context__.to_vec());
      InterceptSigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 35;
      InterceptSigma = context__.vals_r("InterceptSigma")[(1 - 1)];
      current_statement__ = 35;
      current_statement__ = 35;
      check_greater_or_equal(function__, "InterceptSigma", InterceptSigma, 0);
      current_statement__ = 36;
      context__.validate_dims("data initialization","GroupSDNu","double",
          context__.to_vec());
      GroupSDNu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 36;
      GroupSDNu = context__.vals_r("GroupSDNu")[(1 - 1)];
      current_statement__ = 36;
      current_statement__ = 36;
      check_greater_or_equal(function__, "GroupSDNu", GroupSDNu, 0);
      current_statement__ = 37;
      context__.validate_dims("data initialization","GroupSDMu","double",
          context__.to_vec());
      GroupSDMu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 37;
      GroupSDMu = context__.vals_r("GroupSDMu")[(1 - 1)];
      current_statement__ = 37;
      current_statement__ = 37;
      check_greater_or_equal(function__, "GroupSDMu", GroupSDMu, 0);
      current_statement__ = 38;
      context__.validate_dims("data initialization","GroupSDSigma","double",
          context__.to_vec());
      GroupSDSigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 38;
      GroupSDSigma = context__.vals_r("GroupSDSigma")[(1 - 1)];
      current_statement__ = 38;
      current_statement__ = 38;
      check_greater_or_equal(function__, "GroupSDSigma", GroupSDSigma, 0);
      current_statement__ = 39;
      validate_non_negative_index("FlippedResult", "N", N);
      current_statement__ = 40;
      FlippedResult = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 41;
      validate_non_negative_index("Zw", "L * N", (L * N));
      current_statement__ = 42;
      Zw = Eigen::Matrix<double, -1, 1>((L * N));
      stan::math::fill(Zw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 43;
      validate_non_negative_index("Zv", "L * N", (L * N));
      current_statement__ = 44;
      Zv = std::vector<int>((L * N), std::numeric_limits<int>::min());
      
      current_statement__ = 45;
      validate_non_negative_index("Zu", "N + 1", (N + 1));
      current_statement__ = 46;
      Zu = std::vector<int>((N + 1), std::numeric_limits<int>::min());
      
      current_statement__ = 47;
      assign(Zw, nil_index_list(), csr_extract_w(Z), "assigning variable Zw");
      current_statement__ = 48;
      assign(Zv, nil_index_list(), csr_extract_v(Z), "assigning variable Zv");
      current_statement__ = 49;
      assign(Zu, nil_index_list(), csr_extract_u(Z), "assigning variable Zu");
      current_statement__ = 52;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 50;
        assign(FlippedResult, cons_list(index_uni(n), nil_index_list()),
          (1 - Result[(n - 1)]), "assigning variable FlippedResult");}
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 40;
        current_statement__ = 40;
        check_greater_or_equal(function__, "FlippedResult[sym1__]",
                               FlippedResult[(sym1__ - 1)], 0);}
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 40;
        current_statement__ = 40;
        check_less_or_equal(function__, "FlippedResult[sym1__]",
                            FlippedResult[(sym1__ - 1)], 1);}
      current_statement__ = 53;
      validate_non_negative_index("u", "TotalGroups", TotalGroups);
      current_statement__ = 54;
      validate_non_negative_index("group_sd", "L", L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += TotalGroups;
      num_params_r__ += L;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_HierPoolPrevIndividualSD_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ Intercept;
      Intercept = DUMMY_VAR__;
      
      current_statement__ = 1;
      Intercept = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> u;
      u = Eigen::Matrix<local_scalar_t__, -1, 1>(TotalGroups);
      stan::math::fill(u, DUMMY_VAR__);
      
      current_statement__ = 2;
      u = in__.vector(TotalGroups);
      Eigen::Matrix<local_scalar_t__, -1, 1> group_sd;
      group_sd = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(group_sd, DUMMY_VAR__);
      
      current_statement__ = 3;
      group_sd = in__.vector(L);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(group_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(group_sd[(sym1__ - 1)], 0, lp__),
            "assigning variable group_sd");
        } else {
          current_statement__ = 3;
          assign(group_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(group_sd[(sym1__ - 1)], 0),
            "assigning variable group_sd");
        }}
      {
        int k;
        k = std::numeric_limits<int>::min();
        
        current_statement__ = 7;
        validate_non_negative_index("ps", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> ps;
        ps = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(ps, DUMMY_VAR__);
        
        current_statement__ = 9;
        validate_non_negative_index("au", "TotalGroups", TotalGroups);
        Eigen::Matrix<local_scalar_t__, -1, 1> au;
        au = Eigen::Matrix<local_scalar_t__, -1, 1>(TotalGroups);
        stan::math::fill(au, DUMMY_VAR__);
        
        current_statement__ = 11;
        k = 1;
        current_statement__ = 15;
        for (int l = 1; l <= L; ++l) {
          current_statement__ = 12;
          assign(au,
            cons_list(index_min_max(k, ((k + NumGroups[(l - 1)]) - 1)),
              nil_index_list()),
            multiply(
              rvalue(u,
                cons_list(index_min_max(k, ((k + NumGroups[(l - 1)]) - 1)),
                  nil_index_list()), "u"), group_sd[(l - 1)]),
            "assigning variable au");
          current_statement__ = 13;
          k = (k + NumGroups[(l - 1)]);}
        current_statement__ = 16;
        assign(ps, nil_index_list(),
          stan::math::exp(
            elt_multiply(
              log1m_inv_logit(
                add(Intercept,
                  csr_matrix_times_vector(N, TotalGroups, Zw, Zv, Zu, au))),
              PoolSize)), "assigning variable ps");
        current_statement__ = 17;
        lp_accum__.add(
          student_t_lpdf<propto__>(Intercept, InterceptNu, InterceptMu,
            InterceptSigma));
        current_statement__ = 18;
        lp_accum__.add(
          student_t_lpdf<propto__>(group_sd, GroupSDNu, GroupSDMu,
            GroupSDSigma));
        current_statement__ = 19;
        lp_accum__.add(std_normal_lpdf<propto__>(u));
        current_statement__ = 20;
        lp_accum__.add(bernoulli_lpmf<propto__>(FlippedResult, ps));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_HierPoolPrevIndividualSD_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double Intercept;
      Intercept = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      Intercept = in__.scalar();
      Eigen::Matrix<double, -1, 1> u;
      u = Eigen::Matrix<double, -1, 1>(TotalGroups);
      stan::math::fill(u, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      u = in__.vector(TotalGroups);
      Eigen::Matrix<double, -1, 1> group_sd;
      group_sd = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(group_sd, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      group_sd = in__.vector(L);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 3;
        assign(group_sd, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(group_sd[(sym1__ - 1)], 0),
          "assigning variable group_sd");}
      vars__.emplace_back(Intercept);
      for (int sym1__ = 1; sym1__ <= TotalGroups; ++sym1__) {
        vars__.emplace_back(u[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(group_sd[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double total_group_sd;
      total_group_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      total_group_sd = stan::math::sqrt(dot_self(group_sd));
      vars__.emplace_back(total_group_sd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double Intercept;
      Intercept = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      Intercept = context__.vals_r("Intercept")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> u;
      u = Eigen::Matrix<double, -1, 1>(TotalGroups);
      stan::math::fill(u, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> u_flat__;
        current_statement__ = 2;
        assign(u_flat__, nil_index_list(), context__.vals_r("u"),
          "assigning variable u_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= TotalGroups; ++sym1__) {
          current_statement__ = 2;
          assign(u, cons_list(index_uni(sym1__), nil_index_list()),
            u_flat__[(pos__ - 1)], "assigning variable u");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> group_sd;
      group_sd = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(group_sd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> group_sd_flat__;
        current_statement__ = 3;
        assign(group_sd_flat__, nil_index_list(),
          context__.vals_r("group_sd"), "assigning variable group_sd_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 3;
          assign(group_sd, cons_list(index_uni(sym1__), nil_index_list()),
            group_sd_flat__[(pos__ - 1)], "assigning variable group_sd");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> group_sd_free__;
      group_sd_free__ = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(group_sd_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 3;
        assign(group_sd_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(group_sd[(sym1__ - 1)], 0),
          "assigning variable group_sd_free__");}
      vars__.emplace_back(Intercept);
      for (int sym1__ = 1; sym1__ <= TotalGroups; ++sym1__) {
        vars__.emplace_back(u[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(group_sd_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("Intercept");
    names__.emplace_back("u");
    names__.emplace_back("group_sd");
    names__.emplace_back("total_group_sd");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(TotalGroups)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "Intercept");
    for (int sym1__ = 1; sym1__ <= TotalGroups; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "u" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "group_sd" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "total_group_sd");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "Intercept");
    for (int sym1__ = 1; sym1__ <= TotalGroups; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "u" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "group_sd" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "total_group_sd");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"vector\",\"length\":" << TotalGroups << "},\"block\":\"parameters\"},{\"name\":\"group_sd\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"total_group_sd\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"vector\",\"length\":" << TotalGroups << "},\"block\":\"parameters\"},{\"name\":\"group_sd\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"total_group_sd\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_HierPoolPrevIndividualSD_namespace::model_HierPoolPrevIndividualSD;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_HierPoolPrevIndividualSD_namespace::profiles__;
}
#endif
#endif
