// Generated by rstantools.  Do not edit by hand.

/*
    PoolTestR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    PoolTestR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with PoolTestR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_HierPoolPrevIndividualSD_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 55> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 34, column 2 to column 17)",
  " (in 'string', line 35, column 2 to column 24)",
  " (in 'string', line 36, column 2 to column 30)",
  " (in 'string', line 60, column 2 to column 22)",
  " (in 'string', line 61, column 2 to column 44)",
  " (in 'string', line 39, column 2 to column 8)",
  " (in 'string', line 40, column 9 to column 10)",
  " (in 'string', line 40, column 2 to column 15)",
  " (in 'string', line 41, column 9 to column 20)",
  " (in 'string', line 41, column 2 to column 25)",
  " (in 'string', line 42, column 2 to column 8)",
  " (in 'string', line 44, column 4 to column 69)",
  " (in 'string', line 45, column 4 to column 25)",
  " (in 'string', line 43, column 15 to line 46, column 3)",
  " (in 'string', line 43, column 2 to line 46, column 3)",
  " (in 'string', line 53, column 2 to column 104)",
  " (in 'string', line 54, column 2 to column 73)",
  " (in 'string', line 55, column 2 to column 67)",
  " (in 'string', line 56, column 2 to column 34)",
  " (in 'string', line 57, column 2 to column 35)",
  " (in 'string', line 2, column 2 to column 17)",
  " (in 'string', line 3, column 2 to column 17)",
  " (in 'string', line 4, column 8 to column 9)",
  " (in 'string', line 4, column 2 to column 34)",
  " (in 'string', line 5, column 2 to column 27)",
  " (in 'string', line 6, column 8 to column 9)",
  " (in 'string', line 6, column 2 to column 40)",
  " (in 'string', line 7, column 18 to column 19)",
  " (in 'string', line 7, column 2 to column 30)",
  " (in 'string', line 8, column 31 to column 32)",
  " (in 'string', line 8, column 33 to column 44)",
  " (in 'string', line 8, column 2 to column 48)",
  " (in 'string', line 11, column 2 to column 28)",
  " (in 'string', line 12, column 2 to column 28)",
  " (in 'string', line 13, column 2 to column 31)",
  " (in 'string', line 15, column 2 to column 26)",
  " (in 'string', line 16, column 2 to column 26)",
  " (in 'string', line 17, column 2 to column 29)",
  " (in 'string', line 20, column 8 to column 9)",
  " (in 'string', line 20, column 2 to column 47)",
  " (in 'string', line 22, column 9 to column 12)",
  " (in 'string', line 22, column 2 to column 17)",
  " (in 'string', line 23, column 8 to column 11)",
  " (in 'string', line 23, column 2 to column 20)",
  " (in 'string', line 24, column 8 to column 11)",
  " (in 'string', line 24, column 2 to column 20)",
  " (in 'string', line 25, column 2 to column 24)",
  " (in 'string', line 26, column 2 to column 24)",
  " (in 'string', line 27, column 2 to column 24)",
  " (in 'string', line 30, column 4 to column 37)",
  " (in 'string', line 29, column 15 to line 31, column 3)",
  " (in 'string', line 29, column 2 to line 31, column 3)",
  " (in 'string', line 35, column 9 to column 20)",
  " (in 'string', line 36, column 18 to column 19)"};
#include <stan_meta_header.hpp>
class model_HierPoolPrevIndividualSD final : public model_base_crtp<model_HierPoolPrevIndividualSD> {
private:
  int N;
  int L;
  std::vector<int> NumGroups;
  int TotalGroups;
  std::vector<int> Result;
  Eigen::Matrix<double,-1,1> PoolSize_data__;
  Eigen::Matrix<double,-1,-1> Z_data__;
  double InterceptNu;
  double InterceptMu;
  double InterceptSigma;
  double GroupSDNu;
  double GroupSDMu;
  double GroupSDSigma;
  std::vector<int> FlippedResult;
  Eigen::Matrix<double,-1,1> Zw_data__;
  std::vector<int> Zv;
  std::vector<int> Zu;
  Eigen::Map<Eigen::Matrix<double,-1,1>> PoolSize{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> Zw{nullptr, 0};
public:
  ~model_HierPoolPrevIndividualSD() {}
  model_HierPoolPrevIndividualSD(stan::io::var_context& context__,
                                 unsigned int random_seed__ = 0,
                                 std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_HierPoolPrevIndividualSD_namespace::model_HierPoolPrevIndividualSD";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 21;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 21;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 22;
      context__.validate_dims("data initialization", "L", "int",
        std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      current_statement__ = 22;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("NumGroups", "L", L);
      current_statement__ = 24;
      context__.validate_dims("data initialization", "NumGroups", "int",
        std::vector<size_t>{static_cast<size_t>(L)});
      NumGroups = std::vector<int>(L, std::numeric_limits<int>::min());
      current_statement__ = 24;
      NumGroups = context__.vals_i("NumGroups");
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "NumGroups", NumGroups,
        1);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "TotalGroups", "int",
        std::vector<size_t>{});
      TotalGroups = std::numeric_limits<int>::min();
      current_statement__ = 25;
      TotalGroups = context__.vals_i("TotalGroups")[(1 - 1)];
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "TotalGroups",
        TotalGroups, L);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("Result", "N", N);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "Result", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      Result = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 27;
      Result = context__.vals_i("Result");
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "Result", Result, 0);
      current_statement__ = 27;
      stan::math::check_less_or_equal(function__, "Result", Result, 1);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("PoolSize", "N", N);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "PoolSize", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      PoolSize_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                          std::numeric_limits<double>::quiet_NaN());
      new (&PoolSize)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(PoolSize_data__.data(), N);
      {
        std::vector<local_scalar_t__> PoolSize_flat__;
        current_statement__ = 29;
        PoolSize_flat__ = context__.vals_r("PoolSize");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 29;
          stan::model::assign(PoolSize, PoolSize_flat__[(pos__ - 1)],
            "assigning variable PoolSize", stan::model::index_uni(sym1__));
          current_statement__ = 29;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "PoolSize", PoolSize, 0);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("Z", "N", N);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("Z", "TotalGroups", TotalGroups);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "Z", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(TotalGroups)});
      Z_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, TotalGroups,
                   std::numeric_limits<double>::quiet_NaN());
      new (&Z) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z_data__.data(), N,
        TotalGroups);
      {
        std::vector<local_scalar_t__> Z_flat__;
        current_statement__ = 32;
        Z_flat__ = context__.vals_r("Z");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= TotalGroups; ++sym1__) {
          current_statement__ = 32;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 32;
            stan::model::assign(Z, Z_flat__[(pos__ - 1)],
              "assigning variable Z", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 32;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "Z", Z, 0);
      current_statement__ = 32;
      stan::math::check_less_or_equal(function__, "Z", Z, 1);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "InterceptNu", "double",
        std::vector<size_t>{});
      InterceptNu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 33;
      InterceptNu = context__.vals_r("InterceptNu")[(1 - 1)];
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "InterceptNu",
        InterceptNu, 0);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "InterceptMu", "double",
        std::vector<size_t>{});
      InterceptMu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 34;
      InterceptMu = context__.vals_r("InterceptMu")[(1 - 1)];
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "InterceptMu",
        InterceptMu, 0);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "InterceptSigma",
        "double", std::vector<size_t>{});
      InterceptSigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 35;
      InterceptSigma = context__.vals_r("InterceptSigma")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "InterceptSigma",
        InterceptSigma, 0);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "GroupSDNu", "double",
        std::vector<size_t>{});
      GroupSDNu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 36;
      GroupSDNu = context__.vals_r("GroupSDNu")[(1 - 1)];
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "GroupSDNu", GroupSDNu,
        0);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "GroupSDMu", "double",
        std::vector<size_t>{});
      GroupSDMu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 37;
      GroupSDMu = context__.vals_r("GroupSDMu")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "GroupSDMu", GroupSDMu,
        0);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "GroupSDSigma",
        "double", std::vector<size_t>{});
      GroupSDSigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 38;
      GroupSDSigma = context__.vals_r("GroupSDSigma")[(1 - 1)];
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "GroupSDSigma",
        GroupSDSigma, 0);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("FlippedResult", "N", N);
      current_statement__ = 40;
      FlippedResult = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 41;
      stan::math::validate_non_negative_index("Zw", "L * N", (L * N));
      current_statement__ = 42;
      Zw_data__ = Eigen::Matrix<double,-1,1>::Constant((L * N),
                    std::numeric_limits<double>::quiet_NaN());
      new (&Zw) Eigen::Map<Eigen::Matrix<double,-1,1>>(Zw_data__.data(), (L *
        N));
      current_statement__ = 43;
      stan::math::validate_non_negative_index("Zv", "L * N", (L * N));
      current_statement__ = 44;
      Zv = std::vector<int>((L * N), std::numeric_limits<int>::min());
      current_statement__ = 45;
      stan::math::validate_non_negative_index("Zu", "N + 1", (N + 1));
      current_statement__ = 46;
      Zu = std::vector<int>((N + 1), std::numeric_limits<int>::min());
      current_statement__ = 47;
      stan::model::assign(Zw, stan::math::csr_extract_w(Z),
        "assigning variable Zw");
      current_statement__ = 48;
      stan::model::assign(Zv, stan::math::csr_extract_v(Z),
        "assigning variable Zv");
      current_statement__ = 49;
      stan::model::assign(Zu, stan::math::csr_extract_u(Z),
        "assigning variable Zu");
      current_statement__ = 52;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 50;
        stan::model::assign(FlippedResult, (1 -
          stan::model::rvalue(Result, "Result", stan::model::index_uni(n))),
          "assigning variable FlippedResult", stan::model::index_uni(n));
      }
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "FlippedResult",
        FlippedResult, 0);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "FlippedResult",
        FlippedResult, 1);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("u", "TotalGroups", TotalGroups);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("group_sd", "L", L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + TotalGroups + L;
  }
  inline std::string model_name() const final {
    return "model_HierPoolPrevIndividualSD";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_HierPoolPrevIndividualSD_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ Intercept = DUMMY_VAR__;
      current_statement__ = 1;
      Intercept = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> u =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TotalGroups,
          DUMMY_VAR__);
      current_statement__ = 2;
      u = in__.template read<
            Eigen::Matrix<local_scalar_t__,-1,1>>(TotalGroups);
      Eigen::Matrix<local_scalar_t__,-1,1> group_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 3;
      group_sd = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   L);
      {
        int k = std::numeric_limits<int>::min();
        current_statement__ = 7;
        stan::math::validate_non_negative_index("ps", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> ps =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 9;
        stan::math::validate_non_negative_index("au", "TotalGroups",
          TotalGroups);
        Eigen::Matrix<local_scalar_t__,-1,1> au =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TotalGroups,
            DUMMY_VAR__);
        current_statement__ = 11;
        k = 1;
        current_statement__ = 15;
        for (int l = 1; l <= L; ++l) {
          current_statement__ = 12;
          stan::model::assign(au,
            stan::math::multiply(
              stan::model::rvalue(u, "u",
                stan::model::index_min_max(k, ((k +
                  stan::model::rvalue(NumGroups, "NumGroups",
                    stan::model::index_uni(l))) - 1))),
              stan::model::rvalue(group_sd, "group_sd",
                stan::model::index_uni(l))), "assigning variable au",
            stan::model::index_min_max(k, ((k +
              stan::model::rvalue(NumGroups, "NumGroups",
                stan::model::index_uni(l))) - 1)));
          current_statement__ = 13;
          k = (k +
            stan::model::rvalue(NumGroups, "NumGroups",
              stan::model::index_uni(l)));
        }
        current_statement__ = 16;
        stan::model::assign(ps,
          stan::math::exp(
            stan::math::elt_multiply(
              stan::math::log1m_inv_logit(
                stan::math::add(Intercept,
                  stan::math::csr_matrix_times_vector(N, TotalGroups, Zw, Zv,
                    Zu, au))), PoolSize)), "assigning variable ps");
        current_statement__ = 17;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(Intercept,
                         InterceptNu, InterceptMu, InterceptSigma));
        current_statement__ = 18;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(group_sd,
                         GroupSDNu, GroupSDMu, GroupSDSigma));
        current_statement__ = 19;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(u));
        current_statement__ = 20;
        lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(FlippedResult, ps));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_HierPoolPrevIndividualSD_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double Intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      Intercept = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> u =
        Eigen::Matrix<double,-1,1>::Constant(TotalGroups,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      u = in__.template read<
            Eigen::Matrix<local_scalar_t__,-1,1>>(TotalGroups);
      Eigen::Matrix<double,-1,1> group_sd =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      group_sd = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   L);
      out__.write(Intercept);
      out__.write(u);
      out__.write(group_sd);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double total_group_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      total_group_sd = stan::math::sqrt(stan::math::dot_self(group_sd));
      out__.write(total_group_sd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ Intercept = DUMMY_VAR__;
      current_statement__ = 1;
      Intercept = in__.read<local_scalar_t__>();
      out__.write(Intercept);
      Eigen::Matrix<local_scalar_t__,-1,1> u =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TotalGroups,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(u,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(TotalGroups),
        "assigning variable u");
      out__.write(u);
      Eigen::Matrix<local_scalar_t__,-1,1> group_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(group_sd,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(L),
        "assigning variable group_sd");
      out__.write_free_lb(0, group_sd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "Intercept",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "u", "double",
        std::vector<size_t>{static_cast<size_t>(TotalGroups)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "group_sd",
        "double", std::vector<size_t>{static_cast<size_t>(L)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ Intercept = DUMMY_VAR__;
      current_statement__ = 1;
      Intercept = context__.vals_r("Intercept")[(1 - 1)];
      out__.write(Intercept);
      Eigen::Matrix<local_scalar_t__,-1,1> u =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TotalGroups,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> u_flat__;
        current_statement__ = 2;
        u_flat__ = context__.vals_r("u");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= TotalGroups; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(u, u_flat__[(pos__ - 1)],
            "assigning variable u", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(u);
      Eigen::Matrix<local_scalar_t__,-1,1> group_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> group_sd_flat__;
        current_statement__ = 3;
        group_sd_flat__ = context__.vals_r("group_sd");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(group_sd, group_sd_flat__[(pos__ - 1)],
            "assigning variable group_sd", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, group_sd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"Intercept", "u", "group_sd"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"total_group_sd"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(TotalGroups)},
                std::vector<size_t>{static_cast<size_t>(L)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>> temp{std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "Intercept");
    for (int sym1__ = 1; sym1__ <= TotalGroups; ++sym1__) {
      param_names__.emplace_back(std::string() + "u" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "group_sd" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "total_group_sd");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "Intercept");
    for (int sym1__ = 1; sym1__ <= TotalGroups; ++sym1__) {
      param_names__.emplace_back(std::string() + "u" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "group_sd" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "total_group_sd");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(TotalGroups) + "},\"block\":\"parameters\"},{\"name\":\"group_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"total_group_sd\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(TotalGroups) + "},\"block\":\"parameters\"},{\"name\":\"group_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"total_group_sd\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + TotalGroups) + L);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + TotalGroups) + L);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_HierPoolPrevIndividualSD_namespace::model_HierPoolPrevIndividualSD;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_HierPoolPrevIndividualSD_namespace::profiles__;
}
#endif
#endif
